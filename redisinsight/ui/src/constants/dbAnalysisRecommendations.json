{
  "luaScript": {
    "id": "luaScript",
    "title":"Avoid dynamic Lua script",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Refrain from generating dynamic scripts, which can cause your Lua cache to grow and get out of control. Memory is consumed as scripts are loaded. If you have to use dynamic Lua scripts, then remember to track your Lua memory consumption and flush the cache periodically with a SCRIPT FLUSH, also do not hardcode and/or programmatically generate key names in your Lua scripts because it makes them useless in a clustered Redis setup. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "useSmallerKeys": {
    "id": "useSmallerKeys",
    "title":"Use smaller keys",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Shorten key names to optimize memory usage. Though, in general, descriptive key names are always preferred, these large key names can eat a lot of the memory. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "bigHashes": {
    "id": "bigHashes",
    "title": "Shard big hashes to small hashes",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "If you have a hash with a large number of key, value pairs, and if each key, value pair is small enough - break it into smaller hashes to save memory. To shard a HASH table, choose a method of partitioning the data. Hashes themselves have keys that can be used for partitioning the keys into different shards. The number of shards is determined by the total number of keys to be stored and the shard size. Using this and the hash value you can determine the shard ID in which the key resides. Though converting big hashes to small hashes will increase the complexity of your code. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes", "configuration_changes"]
  },
  "avoidLogicalDatabases": {
    "id": "avoidLogicalDatabases",
    "title": "Avoid using logical databases",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Redis supports multiple logical databases within an instance, though these logical databases are neither independent nor isolated in any other way and can freeze each other."
      },
      {
        "id": "2",
        "type": "span",
        "value": "Also, they are not supported by any clustering system (open source or Redis Enterprise clustering), and some modules do not support numbered databases as well. "
      },
      {
        "id": "3",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "combineSmallStringsToHashes": {
    "id": "combineSmallStringsToHashes",
    "title": "Combine small strings to hashes",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Strings data type has an overhead of about 90 bytes on a 64-bit machine, so if there is no need for different expiration values for these keys, combine small strings into a larger hash to optimize the memory usage."
      },
      {
        "id": "2",
        "type": "paragraph",
        "value": "Also, ensure that the hash has less than hash-max-ziplist-entries elements and the size of each element is within hash-max-ziplist-values bytes."
      },
      {
        "id": "3",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "4",
        "type": "span",
        "value": "Though this approach should not be used if you need different expiration values for String keys. "
      },
      {
        "id": "5",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "increaseSetMaxIntsetEntries": {
    "id": "increaseSetMaxIntsetEntries",
    "title": "Increase the set-max-intset-entries",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Several set values with IntSet encoding exceed the set-max-intset-entries. Change the configuration in reds.conf to efficiently use the IntSet encoding." 
      },
      {
        "id": "2",
        "type": "paragraph",
        "value": "Though increasing this value will lead to an increase in latency of set operations and CPU utilization."
      },
      {
        "id": "3",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "4",
        "type": "span",
        "value": "Run `INFO COMMANDSTATS` before and after making this change to verify the latency numbers. "
      },
      {
        "id": "5",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "convertHashtableToZiplist": {
  "id": "convertHashtableToZiplist",
  "title": "Increase hash-max-ziplist-entries",
  "content": [
    {
      "id": "1",
      "type": "span",
      "value": "If any value for a key exceeds hash-max-ziplist-entries, it is stored automatically as a Hashtable instead of a Ziplist, which consumes almost double the memory. So to save memory, increase the configurations and convert your hashtables to ziplist. The trade-off can be an increase in latency and possibly an increase in CPU utilization. "
    },
    {
      "id": "2",
      "type": "link",
      "value": {
        "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
        "name": "Read more"
      }
    }
  ],
  "badges": ["configuration_changes"]
},
  "compressHashFieldNames": {
    "id": "compressHashFieldNames",
    "title": "Compress Hash field names",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Hash field name also consumes memory, so use smaller or shortened field names to reduce memory usage. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  }
}
